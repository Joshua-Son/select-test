// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5t7S5k969EXd9MSJ9ASYQC
// Component: KuyYvbE8JG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Post from "../../Post"; // plasmic-import: rfl638tLfUW/component
import Fab from "../../Fab"; // plasmic-import: PHMKSvzeub5/component
import Button2 from "../../Button2"; // plasmic-import: xU-cWcmy92V/component
import Select2 from "../../Select2"; // plasmic-import: 6WZ_2qWZyHV/component
import Select2__Option from "../../Select2__Option"; // plasmic-import: I4IFKsqRdNe/component
import Dropdown from "../../Dropdown"; // plasmic-import: aKyzrvvlJk/component
import Asdf from "../../Asdf"; // plasmic-import: 4IQDdh-KQE/component
import TextInput from "../../TextInput"; // plasmic-import: IvF6Kt2H5Qj/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_minitwitter.module.css"; // plasmic-import: 5t7S5k969EXd9MSJ9ASYQC/projectcss
import sty from "./PlasmicFeed.module.css"; // plasmic-import: KuyYvbE8JG/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: _23PHN4xKTH/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: mnvf3XPhh3R/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 7IafN6Du7kh/icon

export type PlasmicFeed__VariantMembers = {};

export type PlasmicFeed__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeed__VariantsArgs;
export const PlasmicFeed__VariantProps = new Array<VariantPropType>();

export type PlasmicFeed__ArgsType = {
  test?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFeed__ArgsType;
export const PlasmicFeed__ArgProps = new Array<ArgPropType>("test");

export type PlasmicFeed__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  postList?: p.Flex<"div">;
  addButton?: p.Flex<typeof Fab>;
  dropdown?: p.Flex<typeof Dropdown>;
  asdf?: p.Flex<typeof Asdf>;
  textInput?: p.Flex<typeof TextInput>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultFeedProps {}

export const defaultFeed__Args: Partial<PlasmicFeed__ArgsType> = {};

function PlasmicFeed__RenderFunc(props: {
  variants: PlasmicFeed__VariantsArgs;
  args: PlasmicFeed__ArgsType;
  overrides: PlasmicFeed__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFeed__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Minitwitter"}
          </div>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"postList"}
              data-plasmic-override={overrides.postList}
              hasGap={true}
              className={classNames(projectcss.all, sty.postList)}
            >
              <Post
                className={classNames("__wab_instance", sty.post__jfPex)}
                timestamp={"1 hour ago"}
              >
                {"What state management framework do you use for React?"}
              </Post>

              <Post
                className={classNames("__wab_instance", sty.post__wawG0)}
                timestamp={"2 hours ago"}
              >
                {"Hello world!"}
              </Post>

              <Post
                className={classNames("__wab_instance", sty.post__rtFVh)}
                timestamp={"3 hours ago"}
              >
                {"What state management framework do you use for React?"}
              </Post>
            </p.Stack>

            <Fab
              data-plasmic-name={"addButton"}
              data-plasmic-override={overrides.addButton}
              className={classNames("__wab_instance", sty.addButton)}
            />
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Button2
                  className={classNames("__wab_instance", sty.button2__heyas)}
                />

                <Select2
                  className={classNames("__wab_instance", sty.select2__tQ7Z)}
                />
              </React.Fragment>
            ),
            value: args.test
          })}

          <Dropdown
            data-plasmic-name={"dropdown"}
            data-plasmic-override={overrides.dropdown}
            className={classNames("__wab_instance", sty.dropdown)}
          />

          <Asdf
            data-plasmic-name={"asdf"}
            data-plasmic-override={overrides.asdf}
            className={classNames("__wab_instance", sty.asdf)}
          />

          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "freeBox",
    "postList",
    "addButton",
    "dropdown",
    "asdf",
    "textInput",
    "textbox"
  ],
  text: ["text"],
  freeBox: ["freeBox", "postList", "addButton"],
  postList: ["postList"],
  addButton: ["addButton"],
  dropdown: ["dropdown"],
  asdf: ["asdf"],
  textInput: ["textInput", "textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  freeBox: "div";
  postList: "div";
  addButton: typeof Fab;
  dropdown: typeof Dropdown;
  asdf: typeof Asdf;
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeed__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeed__VariantsArgs;
    args?: PlasmicFeed__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeed__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeed__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeed__ArgProps,
      internalVariantPropNames: PlasmicFeed__VariantProps
    });

    return PlasmicFeed__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeed";
  } else {
    func.displayName = `PlasmicFeed.${nodeName}`;
  }
  return func;
}

export const PlasmicFeed = Object.assign(
  // Top-level PlasmicFeed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    postList: makeNodeComponent("postList"),
    addButton: makeNodeComponent("addButton"),
    dropdown: makeNodeComponent("dropdown"),
    asdf: makeNodeComponent("asdf"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicFeed
    internalVariantProps: PlasmicFeed__VariantProps,
    internalArgProps: PlasmicFeed__ArgProps
  }
);

export default PlasmicFeed;
/* prettier-ignore-end */
