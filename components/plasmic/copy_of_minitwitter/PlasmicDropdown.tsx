// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5t7S5k969EXd9MSJ9ASYQC
// Component: aKyzrvvlJk
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select2__Overlay from "../../Select2__Overlay"; // plasmic-import: q0nyFlnVwjD/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_minitwitter.module.css"; // plasmic-import: 5t7S5k969EXd9MSJ9ASYQC/projectcss
import sty from "./PlasmicDropdown.module.css"; // plasmic-import: aKyzrvvlJk/css

export type PlasmicDropdown__VariantMembers = {
  open: "open";
};

export type PlasmicDropdown__VariantsArgs = {
  open?: SingleBooleanChoiceArg<"open">;
};

type VariantPropType = keyof PlasmicDropdown__VariantsArgs;
export const PlasmicDropdown__VariantProps = new Array<VariantPropType>("open");

export type PlasmicDropdown__ArgsType = {};
type ArgPropType = keyof PlasmicDropdown__ArgsType;
export const PlasmicDropdown__ArgProps = new Array<ArgPropType>();

export type PlasmicDropdown__OverridesType = {
  root?: p.Flex<"div">;
  overlay?: p.Flex<typeof Select2__Overlay>;
};

export interface DefaultDropdownProps {
  open?: SingleBooleanChoiceArg<"open">;
  className?: string;
}

export const defaultDropdown__Args: Partial<PlasmicDropdown__ArgsType> = {};

function PlasmicDropdown__RenderFunc(props: {
  variants: PlasmicDropdown__VariantsArgs;
  args: PlasmicDropdown__ArgsType;
  overrides: PlasmicDropdown__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDropdown__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    active_root: isRootActive
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootActiveProps]}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___2Mnv
        )}
      >
        {"asdfasdffasdfasdfsadfsadfasdfsadf"}
      </div>

      {(triggers.active_root ? true : true) ? (
        <Select2__Overlay
          data-plasmic-name={"overlay"}
          data-plasmic-override={overrides.overlay}
          className={classNames("__wab_instance", sty.overlay)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pvvb8
            )}
          >
            {"Enter some text"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3Mz3
            )}
          >
            {"Enter some text"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0U5YM
            )}
          >
            {"Enter some text"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h2Jlo
            )}
          >
            {"Enter some text"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0H8C
            )}
          >
            {"Enter some text"}
          </div>
        </Select2__Overlay>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "overlay"],
  overlay: ["overlay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  overlay: typeof Select2__Overlay;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdown__VariantsArgs;
    args?: PlasmicDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDropdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDropdown__ArgProps,
      internalVariantPropNames: PlasmicDropdown__VariantProps
    });

    return PlasmicDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDropdown";
  } else {
    func.displayName = `PlasmicDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdown = Object.assign(
  // Top-level PlasmicDropdown renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    overlay: makeNodeComponent("overlay"),

    // Metadata about props expected for PlasmicDropdown
    internalVariantProps: PlasmicDropdown__VariantProps,
    internalArgProps: PlasmicDropdown__ArgProps
  }
);

export default PlasmicDropdown;
/* prettier-ignore-end */
